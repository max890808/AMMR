// Generated by gencpp from file airobots_ammr/status.msg
// DO NOT EDIT!


#ifndef AIROBOTS_AMMR_MESSAGE_STATUS_H
#define AIROBOTS_AMMR_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace airobots_ammr
{
template <class ContainerAllocator>
struct status_
{
  typedef status_<ContainerAllocator> Type;

  status_()
    : position(0)
    , status()  {
    }
  status_(const ContainerAllocator& _alloc)
    : position(0)
    , status(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _position_type;
  _position_type position;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::airobots_ammr::status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::airobots_ammr::status_<ContainerAllocator> const> ConstPtr;

}; // struct status_

typedef ::airobots_ammr::status_<std::allocator<void> > status;

typedef boost::shared_ptr< ::airobots_ammr::status > statusPtr;
typedef boost::shared_ptr< ::airobots_ammr::status const> statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::airobots_ammr::status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::airobots_ammr::status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::airobots_ammr::status_<ContainerAllocator1> & lhs, const ::airobots_ammr::status_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::airobots_ammr::status_<ContainerAllocator1> & lhs, const ::airobots_ammr::status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace airobots_ammr

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::airobots_ammr::status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::airobots_ammr::status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::airobots_ammr::status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::airobots_ammr::status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airobots_ammr::status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airobots_ammr::status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::airobots_ammr::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "561aa337f47712989dd36d699a75f1af";
  }

  static const char* value(const ::airobots_ammr::status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x561aa337f4771298ULL;
  static const uint64_t static_value2 = 0x9dd36d699a75f1afULL;
};

template<class ContainerAllocator>
struct DataType< ::airobots_ammr::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "airobots_ammr/status";
  }

  static const char* value(const ::airobots_ammr::status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::airobots_ammr::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 position\n"
"string status\n"
;
  }

  static const char* value(const ::airobots_ammr::status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::airobots_ammr::status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::airobots_ammr::status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::airobots_ammr::status_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    Printer<int32_t>::stream(s, indent + "  ", v.position);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AIROBOTS_AMMR_MESSAGE_STATUS_H
