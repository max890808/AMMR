// Generated by gencpp from file airobots_ammr/YoloResponse.msg
// DO NOT EDIT!


#ifndef AIROBOTS_AMMR_MESSAGE_YOLORESPONSE_H
#define AIROBOTS_AMMR_MESSAGE_YOLORESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace airobots_ammr
{
template <class ContainerAllocator>
struct YoloResponse_
{
  typedef YoloResponse_<ContainerAllocator> Type;

  YoloResponse_()
    : id(0)
    , position()
    , orientation(0.0)  {
      position.assign(0.0);
  }
  YoloResponse_(const ContainerAllocator& _alloc)
    : id(0)
    , position()
    , orientation(0.0)  {
  (void)_alloc;
      position.assign(0.0);
  }



   typedef int32_t _id_type;
  _id_type id;

   typedef boost::array<float, 4>  _position_type;
  _position_type position;

   typedef float _orientation_type;
  _orientation_type orientation;





  typedef boost::shared_ptr< ::airobots_ammr::YoloResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::airobots_ammr::YoloResponse_<ContainerAllocator> const> ConstPtr;

}; // struct YoloResponse_

typedef ::airobots_ammr::YoloResponse_<std::allocator<void> > YoloResponse;

typedef boost::shared_ptr< ::airobots_ammr::YoloResponse > YoloResponsePtr;
typedef boost::shared_ptr< ::airobots_ammr::YoloResponse const> YoloResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::airobots_ammr::YoloResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::airobots_ammr::YoloResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::airobots_ammr::YoloResponse_<ContainerAllocator1> & lhs, const ::airobots_ammr::YoloResponse_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.position == rhs.position &&
    lhs.orientation == rhs.orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::airobots_ammr::YoloResponse_<ContainerAllocator1> & lhs, const ::airobots_ammr::YoloResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace airobots_ammr

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::airobots_ammr::YoloResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::airobots_ammr::YoloResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::airobots_ammr::YoloResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::airobots_ammr::YoloResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airobots_ammr::YoloResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airobots_ammr::YoloResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::airobots_ammr::YoloResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed6922c9c8e5a1f1ec543288ad75045b";
  }

  static const char* value(const ::airobots_ammr::YoloResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed6922c9c8e5a1f1ULL;
  static const uint64_t static_value2 = 0xec543288ad75045bULL;
};

template<class ContainerAllocator>
struct DataType< ::airobots_ammr::YoloResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "airobots_ammr/YoloResponse";
  }

  static const char* value(const ::airobots_ammr::YoloResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::airobots_ammr::YoloResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"float32[4] position\n"
"float32 orientation \n"
;
  }

  static const char* value(const ::airobots_ammr::YoloResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::airobots_ammr::YoloResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.position);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct YoloResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::airobots_ammr::YoloResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::airobots_ammr::YoloResponse_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "orientation: ";
    Printer<float>::stream(s, indent + "  ", v.orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AIROBOTS_AMMR_MESSAGE_YOLORESPONSE_H
